// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/p2pStream.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	model "github.com/zoobc/zoobc-core/common/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type P2PStreamRequest struct {
	// Types that are valid to be assigned to Data:
	//	*P2PStreamRequest_Empty
	//	*P2PStreamRequest_GetNodeAddressesInfoRequest
	//	*P2PStreamRequest_SendNodeAddressInfoRequest
	//	*P2PStreamRequest_GetNodeProofOfOriginRequest
	//	*P2PStreamRequest_GetPeerInfoRequest
	//	*P2PStreamRequest_SendPeersRequest
	//	*P2PStreamRequest_SendBlockRequest
	//	*P2PStreamRequest_SendTransactionRequest
	//	*P2PStreamRequest_SendBlockTransactionsRequest
	//	*P2PStreamRequest_RequestBlockTransactionsRequest
	//	*P2PStreamRequest_GetCumulativeDifficultyRequest
	//	*P2PStreamRequest_GetCommonMilestoneBlockIdsRequest
	//	*P2PStreamRequest_GetNextBlockIdsRequest
	//	*P2PStreamRequest_GetNextBlocksRequest
	//	*P2PStreamRequest_FileDownloadRequest
	Data                 isP2PStreamRequest_Data `protobuf_oneof:"Data"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *P2PStreamRequest) Reset()         { *m = P2PStreamRequest{} }
func (m *P2PStreamRequest) String() string { return proto.CompactTextString(m) }
func (*P2PStreamRequest) ProtoMessage()    {}
func (*P2PStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35981fcd498e7f4d, []int{0}
}

func (m *P2PStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PStreamRequest.Unmarshal(m, b)
}
func (m *P2PStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PStreamRequest.Marshal(b, m, deterministic)
}
func (m *P2PStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PStreamRequest.Merge(m, src)
}
func (m *P2PStreamRequest) XXX_Size() int {
	return xxx_messageInfo_P2PStreamRequest.Size(m)
}
func (m *P2PStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_P2PStreamRequest proto.InternalMessageInfo

type isP2PStreamRequest_Data interface {
	isP2PStreamRequest_Data()
}

type P2PStreamRequest_Empty struct {
	Empty *model.Empty `protobuf:"bytes,1,opt,name=Empty,proto3,oneof"`
}

type P2PStreamRequest_GetNodeAddressesInfoRequest struct {
	GetNodeAddressesInfoRequest *model.GetNodeAddressesInfoRequest `protobuf:"bytes,2,opt,name=GetNodeAddressesInfoRequest,proto3,oneof"`
}

type P2PStreamRequest_SendNodeAddressInfoRequest struct {
	SendNodeAddressInfoRequest *model.SendNodeAddressInfoRequest `protobuf:"bytes,3,opt,name=SendNodeAddressInfoRequest,proto3,oneof"`
}

type P2PStreamRequest_GetNodeProofOfOriginRequest struct {
	GetNodeProofOfOriginRequest *model.GetNodeProofOfOriginRequest `protobuf:"bytes,4,opt,name=GetNodeProofOfOriginRequest,proto3,oneof"`
}

type P2PStreamRequest_GetPeerInfoRequest struct {
	GetPeerInfoRequest *model.GetPeerInfoRequest `protobuf:"bytes,5,opt,name=GetPeerInfoRequest,proto3,oneof"`
}

type P2PStreamRequest_SendPeersRequest struct {
	SendPeersRequest *model.SendPeersRequest `protobuf:"bytes,6,opt,name=SendPeersRequest,proto3,oneof"`
}

type P2PStreamRequest_SendBlockRequest struct {
	SendBlockRequest *model.SendBlockRequest `protobuf:"bytes,7,opt,name=SendBlockRequest,proto3,oneof"`
}

type P2PStreamRequest_SendTransactionRequest struct {
	SendTransactionRequest *model.SendTransactionRequest `protobuf:"bytes,8,opt,name=SendTransactionRequest,proto3,oneof"`
}

type P2PStreamRequest_SendBlockTransactionsRequest struct {
	SendBlockTransactionsRequest *model.SendBlockTransactionsRequest `protobuf:"bytes,9,opt,name=SendBlockTransactionsRequest,proto3,oneof"`
}

type P2PStreamRequest_RequestBlockTransactionsRequest struct {
	RequestBlockTransactionsRequest *model.RequestBlockTransactionsRequest `protobuf:"bytes,10,opt,name=RequestBlockTransactionsRequest,proto3,oneof"`
}

type P2PStreamRequest_GetCumulativeDifficultyRequest struct {
	GetCumulativeDifficultyRequest *model.GetCumulativeDifficultyRequest `protobuf:"bytes,11,opt,name=GetCumulativeDifficultyRequest,proto3,oneof"`
}

type P2PStreamRequest_GetCommonMilestoneBlockIdsRequest struct {
	GetCommonMilestoneBlockIdsRequest *model.GetCommonMilestoneBlockIdsRequest `protobuf:"bytes,12,opt,name=GetCommonMilestoneBlockIdsRequest,proto3,oneof"`
}

type P2PStreamRequest_GetNextBlockIdsRequest struct {
	GetNextBlockIdsRequest *model.GetNextBlockIdsRequest `protobuf:"bytes,13,opt,name=GetNextBlockIdsRequest,proto3,oneof"`
}

type P2PStreamRequest_GetNextBlocksRequest struct {
	GetNextBlocksRequest *model.GetNextBlocksRequest `protobuf:"bytes,14,opt,name=GetNextBlocksRequest,proto3,oneof"`
}

type P2PStreamRequest_FileDownloadRequest struct {
	FileDownloadRequest *model.FileDownloadRequest `protobuf:"bytes,15,opt,name=FileDownloadRequest,proto3,oneof"`
}

func (*P2PStreamRequest_Empty) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_GetNodeAddressesInfoRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_SendNodeAddressInfoRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_GetNodeProofOfOriginRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_GetPeerInfoRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_SendPeersRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_SendBlockRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_SendTransactionRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_SendBlockTransactionsRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_RequestBlockTransactionsRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_GetCumulativeDifficultyRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_GetCommonMilestoneBlockIdsRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_GetNextBlockIdsRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_GetNextBlocksRequest) isP2PStreamRequest_Data() {}

func (*P2PStreamRequest_FileDownloadRequest) isP2PStreamRequest_Data() {}

func (m *P2PStreamRequest) GetData() isP2PStreamRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *P2PStreamRequest) GetEmpty() *model.Empty {
	if x, ok := m.GetData().(*P2PStreamRequest_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *P2PStreamRequest) GetGetNodeAddressesInfoRequest() *model.GetNodeAddressesInfoRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_GetNodeAddressesInfoRequest); ok {
		return x.GetNodeAddressesInfoRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetSendNodeAddressInfoRequest() *model.SendNodeAddressInfoRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_SendNodeAddressInfoRequest); ok {
		return x.SendNodeAddressInfoRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetGetNodeProofOfOriginRequest() *model.GetNodeProofOfOriginRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_GetNodeProofOfOriginRequest); ok {
		return x.GetNodeProofOfOriginRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetGetPeerInfoRequest() *model.GetPeerInfoRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_GetPeerInfoRequest); ok {
		return x.GetPeerInfoRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetSendPeersRequest() *model.SendPeersRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_SendPeersRequest); ok {
		return x.SendPeersRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetSendBlockRequest() *model.SendBlockRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_SendBlockRequest); ok {
		return x.SendBlockRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetSendTransactionRequest() *model.SendTransactionRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_SendTransactionRequest); ok {
		return x.SendTransactionRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetSendBlockTransactionsRequest() *model.SendBlockTransactionsRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_SendBlockTransactionsRequest); ok {
		return x.SendBlockTransactionsRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetRequestBlockTransactionsRequest() *model.RequestBlockTransactionsRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_RequestBlockTransactionsRequest); ok {
		return x.RequestBlockTransactionsRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetGetCumulativeDifficultyRequest() *model.GetCumulativeDifficultyRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_GetCumulativeDifficultyRequest); ok {
		return x.GetCumulativeDifficultyRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetGetCommonMilestoneBlockIdsRequest() *model.GetCommonMilestoneBlockIdsRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_GetCommonMilestoneBlockIdsRequest); ok {
		return x.GetCommonMilestoneBlockIdsRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetGetNextBlockIdsRequest() *model.GetNextBlockIdsRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_GetNextBlockIdsRequest); ok {
		return x.GetNextBlockIdsRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetGetNextBlocksRequest() *model.GetNextBlocksRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_GetNextBlocksRequest); ok {
		return x.GetNextBlocksRequest
	}
	return nil
}

func (m *P2PStreamRequest) GetFileDownloadRequest() *model.FileDownloadRequest {
	if x, ok := m.GetData().(*P2PStreamRequest_FileDownloadRequest); ok {
		return x.FileDownloadRequest
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*P2PStreamRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*P2PStreamRequest_Empty)(nil),
		(*P2PStreamRequest_GetNodeAddressesInfoRequest)(nil),
		(*P2PStreamRequest_SendNodeAddressInfoRequest)(nil),
		(*P2PStreamRequest_GetNodeProofOfOriginRequest)(nil),
		(*P2PStreamRequest_GetPeerInfoRequest)(nil),
		(*P2PStreamRequest_SendPeersRequest)(nil),
		(*P2PStreamRequest_SendBlockRequest)(nil),
		(*P2PStreamRequest_SendTransactionRequest)(nil),
		(*P2PStreamRequest_SendBlockTransactionsRequest)(nil),
		(*P2PStreamRequest_RequestBlockTransactionsRequest)(nil),
		(*P2PStreamRequest_GetCumulativeDifficultyRequest)(nil),
		(*P2PStreamRequest_GetCommonMilestoneBlockIdsRequest)(nil),
		(*P2PStreamRequest_GetNextBlockIdsRequest)(nil),
		(*P2PStreamRequest_GetNextBlocksRequest)(nil),
		(*P2PStreamRequest_FileDownloadRequest)(nil),
	}
}

type P2PStreamResponse struct {
	Empty                              *model.Empty                              `protobuf:"bytes,1,opt,name=Empty,proto3" json:"Empty,omitempty"`
	GetNodeAddressesInfoResponse       *model.GetNodeAddressesInfoResponse       `protobuf:"bytes,2,opt,name=GetNodeAddressesInfoResponse,proto3" json:"GetNodeAddressesInfoResponse,omitempty"`
	ProofOfOrigin                      *model.ProofOfOrigin                      `protobuf:"bytes,3,opt,name=ProofOfOrigin,proto3" json:"ProofOfOrigin,omitempty"`
	GetPeerInfoResponse                *model.GetPeerInfoResponse                `protobuf:"bytes,4,opt,name=GetPeerInfoResponse,proto3" json:"GetPeerInfoResponse,omitempty"`
	GetMorePeersResponse               *model.GetMorePeersResponse               `protobuf:"bytes,5,opt,name=GetMorePeersResponse,proto3" json:"GetMorePeersResponse,omitempty"`
	SendBlockResponse                  *model.SendBlockResponse                  `protobuf:"bytes,6,opt,name=SendBlockResponse,proto3" json:"SendBlockResponse,omitempty"`
	SendTransactionResponse            *model.SendTransactionResponse            `protobuf:"bytes,7,opt,name=SendTransactionResponse,proto3" json:"SendTransactionResponse,omitempty"`
	SendBlockTransactionsResponse      *model.SendBlockTransactionsResponse      `protobuf:"bytes,8,opt,name=SendBlockTransactionsResponse,proto3" json:"SendBlockTransactionsResponse,omitempty"`
	GetCumulativeDifficultyResponse    *model.GetCumulativeDifficultyResponse    `protobuf:"bytes,9,opt,name=GetCumulativeDifficultyResponse,proto3" json:"GetCumulativeDifficultyResponse,omitempty"`
	GetCommonMilestoneBlockIdsResponse *model.GetCommonMilestoneBlockIdsResponse `protobuf:"bytes,10,opt,name=GetCommonMilestoneBlockIdsResponse,proto3" json:"GetCommonMilestoneBlockIdsResponse,omitempty"`
	BlockIdsResponse                   *model.BlockIdsResponse                   `protobuf:"bytes,11,opt,name=BlockIdsResponse,proto3" json:"BlockIdsResponse,omitempty"`
	BlocksData                         *model.BlocksData                         `protobuf:"bytes,12,opt,name=BlocksData,proto3" json:"BlocksData,omitempty"`
	FileDownloadResponse               *model.FileDownloadResponse               `protobuf:"bytes,13,opt,name=FileDownloadResponse,proto3" json:"FileDownloadResponse,omitempty"`
	XXX_NoUnkeyedLiteral               struct{}                                  `json:"-"`
	XXX_unrecognized                   []byte                                    `json:"-"`
	XXX_sizecache                      int32                                     `json:"-"`
}

func (m *P2PStreamResponse) Reset()         { *m = P2PStreamResponse{} }
func (m *P2PStreamResponse) String() string { return proto.CompactTextString(m) }
func (*P2PStreamResponse) ProtoMessage()    {}
func (*P2PStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35981fcd498e7f4d, []int{1}
}

func (m *P2PStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PStreamResponse.Unmarshal(m, b)
}
func (m *P2PStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PStreamResponse.Marshal(b, m, deterministic)
}
func (m *P2PStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PStreamResponse.Merge(m, src)
}
func (m *P2PStreamResponse) XXX_Size() int {
	return xxx_messageInfo_P2PStreamResponse.Size(m)
}
func (m *P2PStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_P2PStreamResponse proto.InternalMessageInfo

func (m *P2PStreamResponse) GetEmpty() *model.Empty {
	if m != nil {
		return m.Empty
	}
	return nil
}

func (m *P2PStreamResponse) GetGetNodeAddressesInfoResponse() *model.GetNodeAddressesInfoResponse {
	if m != nil {
		return m.GetNodeAddressesInfoResponse
	}
	return nil
}

func (m *P2PStreamResponse) GetProofOfOrigin() *model.ProofOfOrigin {
	if m != nil {
		return m.ProofOfOrigin
	}
	return nil
}

func (m *P2PStreamResponse) GetGetPeerInfoResponse() *model.GetPeerInfoResponse {
	if m != nil {
		return m.GetPeerInfoResponse
	}
	return nil
}

func (m *P2PStreamResponse) GetGetMorePeersResponse() *model.GetMorePeersResponse {
	if m != nil {
		return m.GetMorePeersResponse
	}
	return nil
}

func (m *P2PStreamResponse) GetSendBlockResponse() *model.SendBlockResponse {
	if m != nil {
		return m.SendBlockResponse
	}
	return nil
}

func (m *P2PStreamResponse) GetSendTransactionResponse() *model.SendTransactionResponse {
	if m != nil {
		return m.SendTransactionResponse
	}
	return nil
}

func (m *P2PStreamResponse) GetSendBlockTransactionsResponse() *model.SendBlockTransactionsResponse {
	if m != nil {
		return m.SendBlockTransactionsResponse
	}
	return nil
}

func (m *P2PStreamResponse) GetGetCumulativeDifficultyResponse() *model.GetCumulativeDifficultyResponse {
	if m != nil {
		return m.GetCumulativeDifficultyResponse
	}
	return nil
}

func (m *P2PStreamResponse) GetGetCommonMilestoneBlockIdsResponse() *model.GetCommonMilestoneBlockIdsResponse {
	if m != nil {
		return m.GetCommonMilestoneBlockIdsResponse
	}
	return nil
}

func (m *P2PStreamResponse) GetBlockIdsResponse() *model.BlockIdsResponse {
	if m != nil {
		return m.BlockIdsResponse
	}
	return nil
}

func (m *P2PStreamResponse) GetBlocksData() *model.BlocksData {
	if m != nil {
		return m.BlocksData
	}
	return nil
}

func (m *P2PStreamResponse) GetFileDownloadResponse() *model.FileDownloadResponse {
	if m != nil {
		return m.FileDownloadResponse
	}
	return nil
}

func init() {
	proto.RegisterType((*P2PStreamRequest)(nil), "service.P2PStreamRequest")
	proto.RegisterType((*P2PStreamResponse)(nil), "service.P2PStreamResponse")
}

func init() {
	proto.RegisterFile("service/p2pStream.proto", fileDescriptor_35981fcd498e7f4d)
}

var fileDescriptor_35981fcd498e7f4d = []byte{
	// 813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0xdb, 0x52, 0xdb, 0x48,
	0x10, 0x86, 0xe5, 0x5d, 0x8e, 0x0d, 0xec, 0xda, 0x03, 0x85, 0x8d, 0x39, 0x2d, 0x86, 0xdd, 0x62,
	0x53, 0x89, 0x9d, 0x38, 0x77, 0xb9, 0x0b, 0x27, 0x8b, 0x4a, 0x00, 0x67, 0xa0, 0x2a, 0xa9, 0xdc,
	0xc9, 0xf2, 0x18, 0x94, 0xd8, 0x1a, 0x47, 0x1a, 0x13, 0xc8, 0xcb, 0xe5, 0x91, 0xf2, 0x0a, 0x29,
	0xcd, 0xb4, 0xec, 0x91, 0x35, 0x96, 0xb9, 0x49, 0xa5, 0xba, 0xff, 0xfe, 0xfe, 0x69, 0x69, 0xfc,
	0x23, 0x28, 0x86, 0x2c, 0xb8, 0xf7, 0x5c, 0x56, 0xeb, 0xd7, 0xfb, 0xd7, 0x22, 0x60, 0x4e, 0xaf,
	0xda, 0x0f, 0xb8, 0xe0, 0x64, 0x1e, 0x1b, 0xe5, 0x7c, 0x8f, 0xb7, 0x59, 0xb7, 0xd6, 0x67, 0x2c,
	0x50, 0xad, 0x72, 0x41, 0x55, 0x58, 0xaf, 0x2f, 0x1e, 0x93, 0xa5, 0x56, 0x97, 0xbb, 0x5f, 0xb1,
	0xb4, 0xae, 0x95, 0xdc, 0x3b, 0xc7, 0xf3, 0xb1, 0x5e, 0x54, 0x75, 0x11, 0x38, 0x7e, 0xe8, 0xb8,
	0xc2, 0xe3, 0x71, 0xa3, 0xa4, 0x1a, 0x1d, 0xaf, 0xcb, 0x4e, 0xf8, 0x77, 0xbf, 0xcb, 0x9d, 0x36,
	0x76, 0x36, 0x55, 0xc7, 0xe7, 0x6d, 0xf6, 0xb6, 0xdd, 0x0e, 0x58, 0x18, 0x9e, 0xfb, 0x1d, 0x8e,
	0xcd, 0x0d, 0x3c, 0x5f, 0xc0, 0x79, 0xe7, 0xaa, 0x73, 0x15, 0x78, 0xb7, 0xb1, 0x55, 0xe5, 0x17,
	0x40, 0xbe, 0x59, 0x6f, 0xaa, 0xbd, 0x28, 0xfb, 0x36, 0x60, 0xa1, 0x20, 0x07, 0x30, 0x7b, 0x1a,
	0x9d, 0xbc, 0x94, 0xfb, 0x27, 0x77, 0xb8, 0x54, 0x5f, 0xae, 0xca, 0xf9, 0xaa, 0xac, 0xd9, 0x16,
	0x55, 0x4d, 0xd2, 0x81, 0xcd, 0x06, 0x13, 0x97, 0x23, 0x47, 0x26, 0x3d, 0x11, 0x52, 0xfa, 0x43,
	0xce, 0x56, 0x70, 0x36, 0x43, 0x69, 0x5b, 0x34, 0x0b, 0x44, 0x5c, 0x28, 0x5f, 0x33, 0xbf, 0x7d,
	0x99, 0x5c, 0x2d, 0xb6, 0xf9, 0x53, 0xda, 0xec, 0xa1, 0xcd, 0x64, 0xa1, 0x6d, 0xd1, 0x0c, 0x8c,
	0xb6, 0x4c, 0x53, 0x7f, 0x4a, 0xb1, 0xcb, 0x8c, 0x69, 0x19, 0x93, 0x52, 0x5b, 0xc6, 0xd4, 0x26,
	0xef, 0x80, 0x34, 0x98, 0x68, 0x32, 0x16, 0xe8, 0x4b, 0xcc, 0x4a, 0xfc, 0xc6, 0x08, 0x3f, 0x26,
	0xb0, 0x2d, 0x6a, 0x18, 0x23, 0xa7, 0x90, 0x8f, 0x56, 0x8a, 0xca, 0x61, 0x8c, 0x9a, 0x93, 0xa8,
	0xa2, 0xf6, 0x3c, 0xf4, 0xb6, 0x6d, 0xd1, 0xd4, 0x48, 0x8c, 0x39, 0x8a, 0xae, 0x61, 0x8c, 0x99,
	0x4f, 0x61, 0xf4, 0x76, 0x8c, 0xd1, 0x6b, 0xe4, 0x23, 0xac, 0x47, 0xb5, 0x9b, 0xd1, 0xad, 0x8d,
	0x61, 0x0b, 0x12, 0xb6, 0xad, 0xc1, 0xd2, 0x22, 0xdb, 0xa2, 0x13, 0xc6, 0x89, 0x07, 0x5b, 0x43,
	0x33, 0xad, 0x3d, 0x5c, 0x79, 0x51, 0xe2, 0xf7, 0xc7, 0xcf, 0x6a, 0x90, 0xda, 0x16, 0xcd, 0x44,
	0x91, 0x00, 0x76, 0xf1, 0xbf, 0x13, 0xdd, 0x40, 0xba, 0xfd, 0x87, 0x6e, 0x53, 0xd4, 0xb6, 0x45,
	0xa7, 0x01, 0x09, 0x87, 0x9d, 0x06, 0x13, 0xc7, 0x83, 0xde, 0xa0, 0xeb, 0x08, 0xef, 0x9e, 0x9d,
	0x78, 0x9d, 0x8e, 0xe7, 0x0e, 0xba, 0xe2, 0x31, 0xb6, 0x5c, 0x92, 0x96, 0xff, 0x8e, 0xae, 0x47,
	0x86, 0xd8, 0xb6, 0xe8, 0x14, 0x1c, 0x79, 0x80, 0xbd, 0x48, 0xc1, 0x7b, 0x3d, 0xee, 0x5f, 0x78,
	0x5d, 0x16, 0x0a, 0xee, 0x33, 0x79, 0xbc, 0xf3, 0xf6, 0x70, 0xcd, 0x65, 0xe9, 0x79, 0xa8, 0x79,
	0x66, 0xea, 0x6d, 0x8b, 0x4e, 0x87, 0x46, 0x57, 0x24, 0xfa, 0x71, 0xb0, 0x07, 0x31, 0x6e, 0xb7,
	0x92, 0xb8, 0x22, 0x66, 0x51, 0x74, 0x45, 0xcc, 0x1d, 0xf2, 0x01, 0xd6, 0xf4, 0xce, 0x10, 0xfb,
	0x97, 0xc4, 0x6e, 0x1a, 0xb0, 0x1a, 0xd4, 0x38, 0x4a, 0x2e, 0x61, 0xf5, 0x4c, 0xcb, 0xd9, 0x98,
	0xf8, 0xb7, 0x24, 0x96, 0x91, 0x68, 0x50, 0xd8, 0x16, 0x35, 0x0d, 0x1e, 0xcd, 0xc1, 0xcc, 0x89,
	0x23, 0x9c, 0xca, 0xcf, 0x05, 0x28, 0x68, 0x89, 0x1b, 0xf6, 0xb9, 0x1f, 0x32, 0x52, 0xc9, 0x88,
	0xdc, 0x38, 0x70, 0x6f, 0x61, 0xcb, 0x9c, 0x93, 0x8a, 0x81, 0x89, 0xbb, 0x9f, 0x99, 0xb8, 0x4a,
	0x4a, 0x33, 0x41, 0xe4, 0x0d, 0xac, 0x24, 0xc2, 0x0b, 0x43, 0x76, 0x0d, 0xc9, 0xc9, 0x60, 0x4b,
	0x4a, 0xc9, 0x7b, 0x58, 0x4d, 0x24, 0x15, 0x9e, 0x6d, 0x26, 0xf1, 0xd8, 0x0c, 0x0a, 0x6a, 0x1a,
	0x23, 0x57, 0xf2, 0xbd, 0x5e, 0xf0, 0x80, 0x61, 0x62, 0x21, 0x6e, 0x76, 0xfc, 0xbd, 0xa6, 0x24,
	0xd4, 0x38, 0x48, 0xce, 0xa0, 0xa0, 0x05, 0x17, 0xd2, 0x54, 0x66, 0x96, 0xd2, 0x61, 0x87, 0xa8,
	0xf4, 0x08, 0xf9, 0x04, 0xc5, 0x54, 0x5a, 0x21, 0x4d, 0x45, 0xe7, 0xce, 0xa4, 0xb4, 0x43, 0xe6,
	0xa4, 0x71, 0xf2, 0x05, 0xb6, 0x27, 0x44, 0x14, 0xf2, 0x55, 0x9a, 0x1e, 0x64, 0xc7, 0x1d, 0xba,
	0x64, 0xa3, 0x48, 0x1f, 0x76, 0x27, 0x66, 0x05, 0xba, 0x2d, 0x26, 0xe2, 0x6e, 0x8a, 0x9a, 0x4e,
	0xc3, 0x91, 0x47, 0xa8, 0x64, 0xc5, 0x04, 0x9a, 0xaa, 0x8c, 0xfd, 0xff, 0x09, 0xe1, 0x83, 0xbe,
	0x4f, 0x80, 0x92, 0x63, 0xc8, 0xa7, 0x8c, 0x96, 0x12, 0x7f, 0xe6, 0x52, 0xd8, 0xd4, 0x00, 0x79,
	0x05, 0xa0, 0x62, 0x22, 0xfa, 0x2d, 0x63, 0x48, 0x16, 0xf4, 0x71, 0xd9, 0xa0, 0x9a, 0x28, 0xba,
	0xc3, 0xc9, 0x3c, 0x40, 0xef, 0x95, 0xc4, 0x1d, 0x36, 0x49, 0xa8, 0x71, 0xb0, 0x7e, 0x03, 0x8b,
	0xc3, 0x00, 0x21, 0x0d, 0x58, 0x88, 0xde, 0xb1, 0x74, 0xda, 0xa8, 0xe2, 0x17, 0x69, 0x75, 0xfc,
	0x93, 0xae, 0x5c, 0x36, 0xb5, 0x14, 0xaf, 0x62, 0x1d, 0xe6, 0x5e, 0xe6, 0x8e, 0x9e, 0x7f, 0x7e,
	0x76, 0xeb, 0x89, 0xbb, 0x41, 0xab, 0xea, 0xf2, 0x5e, 0xed, 0x07, 0xe7, 0x2d, 0x57, 0xfd, 0xfb,
	0xc2, 0xe5, 0x01, 0xab, 0xb9, 0xf2, 0xe9, 0xd6, 0x90, 0xd2, 0x9a, 0x93, 0x9f, 0x8f, 0xaf, 0x7f,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x47, 0xb7, 0x0c, 0x19, 0x1d, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// P2PStreamClient is the client API for P2PStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type P2PStreamClient interface {
	SendData(ctx context.Context, opts ...grpc.CallOption) (P2PStream_SendDataClient, error)
}

type p2PStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PStreamClient(cc grpc.ClientConnInterface) P2PStreamClient {
	return &p2PStreamClient{cc}
}

func (c *p2PStreamClient) SendData(ctx context.Context, opts ...grpc.CallOption) (P2PStream_SendDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_P2PStream_serviceDesc.Streams[0], "/service.P2PStream/SendData", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PStreamSendDataClient{stream}
	return x, nil
}

type P2PStream_SendDataClient interface {
	Send(*P2PStreamRequest) error
	Recv() (*P2PStreamResponse, error)
	grpc.ClientStream
}

type p2PStreamSendDataClient struct {
	grpc.ClientStream
}

func (x *p2PStreamSendDataClient) Send(m *P2PStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *p2PStreamSendDataClient) Recv() (*P2PStreamResponse, error) {
	m := new(P2PStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// P2PStreamServer is the server API for P2PStream service.
type P2PStreamServer interface {
	SendData(P2PStream_SendDataServer) error
}

// UnimplementedP2PStreamServer can be embedded to have forward compatible implementations.
type UnimplementedP2PStreamServer struct {
}

func (*UnimplementedP2PStreamServer) SendData(srv P2PStream_SendDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SendData not implemented")
}

func RegisterP2PStreamServer(s *grpc.Server, srv P2PStreamServer) {
	s.RegisterService(&_P2PStream_serviceDesc, srv)
}

func _P2PStream_SendData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PStreamServer).SendData(&p2PStreamSendDataServer{stream})
}

type P2PStream_SendDataServer interface {
	Send(*P2PStreamResponse) error
	Recv() (*P2PStreamRequest, error)
	grpc.ServerStream
}

type p2PStreamSendDataServer struct {
	grpc.ServerStream
}

func (x *p2PStreamSendDataServer) Send(m *P2PStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *p2PStreamSendDataServer) Recv() (*P2PStreamRequest, error) {
	m := new(P2PStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _P2PStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.P2PStream",
	HandlerType: (*P2PStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendData",
			Handler:       _P2PStream_SendData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/p2pStream.proto",
}
