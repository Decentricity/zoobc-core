// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/nodeAdmin.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	model "github.com/zoobc/zoobc-core/common/model"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service/nodeAdmin.proto", fileDescriptor_6aaca660bfc25d33) }

var fileDescriptor_6aaca660bfc25d33 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0x4e, 0x02, 0x31,
	0x14, 0x86, 0x13, 0x16, 0x9a, 0x4c, 0x8c, 0x62, 0x5d, 0x90, 0x4c, 0x00, 0x03, 0xea, 0x42, 0xa3,
	0xd3, 0xa8, 0x27, 0xd0, 0xc4, 0xb0, 0xd0, 0x88, 0xd1, 0x9d, 0xbb, 0xd2, 0x79, 0x0c, 0x4d, 0x68,
	0x5f, 0x6d, 0x0b, 0x04, 0xe3, 0xca, 0x2b, 0x78, 0x34, 0xaf, 0xe0, 0xda, 0x33, 0x98, 0x99, 0x76,
	0x10, 0x46, 0xdc, 0x74, 0xf1, 0xff, 0xff, 0xeb, 0xf7, 0xb7, 0x2f, 0x6a, 0x58, 0x30, 0x53, 0xc1,
	0x81, 0x2a, 0x4c, 0xe1, 0x2a, 0x95, 0x42, 0x25, 0xda, 0xa0, 0x43, 0xb2, 0x19, 0x8c, 0xb8, 0x29,
	0x31, 0x85, 0x31, 0xd5, 0x06, 0x71, 0xd8, 0x1f, 0xf6, 0x67, 0x0a, 0x8c, 0x1d, 0x09, 0xed, 0x63,
	0x71, 0xdd, 0xbb, 0xf9, 0x74, 0x50, 0x9a, 0x19, 0x62, 0x36, 0x06, 0xca, 0xb4, 0xa0, 0x4c, 0x29,
	0x74, 0xcc, 0x09, 0x54, 0x36, 0xb8, 0xbb, 0x3e, 0x0f, 0x52, 0xbb, 0xb9, 0x97, 0x2e, 0xbe, 0x6b,
	0x51, 0xfd, 0xbe, 0xa4, 0x3f, 0x79, 0x2a, 0x79, 0x8b, 0xf6, 0x7a, 0xe0, 0x1e, 0x2a, 0x50, 0xd2,
	0x49, 0x8a, 0xf9, 0x64, 0x8d, 0xf7, 0x08, 0x2f, 0x13, 0xb0, 0x2e, 0x6e, 0x84, 0x48, 0xd5, 0xef,
	0x1e, 0xbf, 0x7f, 0x7e, 0x7d, 0xd4, 0x0e, 0x48, 0x87, 0x4e, 0xcf, 0x8b, 0xc2, 0x2c, 0x07, 0xd2,
	0x6c, 0x0d, 0x66, 0x16, 0xed, 0xf4, 0x40, 0x81, 0x61, 0x0e, 0xf2, 0x66, 0xb7, 0x30, 0x27, 0xad,
	0x05, 0x79, 0x45, 0x2f, 0xa9, 0xed, 0xff, 0x6c, 0xab, 0x51, 0x59, 0xe8, 0x1e, 0x15, 0xf0, 0x7d,
	0xd2, 0xaa, 0xc2, 0x57, 0x29, 0x3c, 0xda, 0xee, 0x81, 0xbb, 0x63, 0xd6, 0x95, 0xca, 0x56, 0xb8,
	0xf8, 0x26, 0xff, 0xb1, 0xf8, 0xb7, 0xc5, 0x72, 0x68, 0x41, 0x39, 0x2c, 0x28, 0x6d, 0xd2, 0xfc,
	0xf3, 0xc4, 0xa5, 0xf4, 0xf5, 0xe9, 0xf3, 0x49, 0x26, 0xdc, 0x68, 0x32, 0x48, 0x38, 0x4a, 0xfa,
	0x8a, 0x38, 0xe0, 0xfe, 0x3c, 0xe3, 0x68, 0x80, 0x72, 0x94, 0x12, 0x15, 0x0d, 0xfb, 0x1f, 0x6c,
	0x14, 0x5b, 0xba, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xce, 0xad, 0x07, 0x2a, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeAdminServiceClient is the client API for NodeAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeAdminServiceClient interface {
	GetProofOfOwnership(ctx context.Context, in *model.GetProofOfOwnershipRequest, opts ...grpc.CallOption) (*model.ProofOfOwnership, error)
	GenerateNodeKey(ctx context.Context, in *model.GenerateNodeKeyRequest, opts ...grpc.CallOption) (*model.GenerateNodeKeyResponse, error)
	// GetLastNodeKey handles request to get last node key
	GetLastNodeKey(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*model.GetLastNodeKeyResponse, error)
}

type nodeAdminServiceClient struct {
	cc *grpc.ClientConn
}

func NewNodeAdminServiceClient(cc *grpc.ClientConn) NodeAdminServiceClient {
	return &nodeAdminServiceClient{cc}
}

func (c *nodeAdminServiceClient) GetProofOfOwnership(ctx context.Context, in *model.GetProofOfOwnershipRequest, opts ...grpc.CallOption) (*model.ProofOfOwnership, error) {
	out := new(model.ProofOfOwnership)
	err := c.cc.Invoke(ctx, "/service.NodeAdminService/GetProofOfOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAdminServiceClient) GenerateNodeKey(ctx context.Context, in *model.GenerateNodeKeyRequest, opts ...grpc.CallOption) (*model.GenerateNodeKeyResponse, error) {
	out := new(model.GenerateNodeKeyResponse)
	err := c.cc.Invoke(ctx, "/service.NodeAdminService/GenerateNodeKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAdminServiceClient) GetLastNodeKey(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*model.GetLastNodeKeyResponse, error) {
	out := new(model.GetLastNodeKeyResponse)
	err := c.cc.Invoke(ctx, "/service.NodeAdminService/GetLastNodeKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeAdminServiceServer is the server API for NodeAdminService service.
type NodeAdminServiceServer interface {
	GetProofOfOwnership(context.Context, *model.GetProofOfOwnershipRequest) (*model.ProofOfOwnership, error)
	GenerateNodeKey(context.Context, *model.GenerateNodeKeyRequest) (*model.GenerateNodeKeyResponse, error)
	// GetLastNodeKey handles request to get last node key
	GetLastNodeKey(context.Context, *model.Empty) (*model.GetLastNodeKeyResponse, error)
}

func RegisterNodeAdminServiceServer(s *grpc.Server, srv NodeAdminServiceServer) {
	s.RegisterService(&_NodeAdminService_serviceDesc, srv)
}

func _NodeAdminService_GetProofOfOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetProofOfOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAdminServiceServer).GetProofOfOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeAdminService/GetProofOfOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAdminServiceServer).GetProofOfOwnership(ctx, req.(*model.GetProofOfOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAdminService_GenerateNodeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GenerateNodeKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAdminServiceServer).GenerateNodeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeAdminService/GenerateNodeKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAdminServiceServer).GenerateNodeKey(ctx, req.(*model.GenerateNodeKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAdminService_GetLastNodeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAdminServiceServer).GetLastNodeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeAdminService/GetLastNodeKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAdminServiceServer).GetLastNodeKey(ctx, req.(*model.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeAdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.NodeAdminService",
	HandlerType: (*NodeAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProofOfOwnership",
			Handler:    _NodeAdminService_GetProofOfOwnership_Handler,
		},
		{
			MethodName: "GenerateNodeKey",
			Handler:    _NodeAdminService_GenerateNodeKey_Handler,
		},
		{
			MethodName: "GetLastNodeKey",
			Handler:    _NodeAdminService_GetLastNodeKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/nodeAdmin.proto",
}
