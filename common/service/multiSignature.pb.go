// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.7.1
// source: service/multiSignature.proto

package service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	model "github.com/zoobc/zoobc-core/common/model"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_service_multiSignature_proto protoreflect.FileDescriptor

var file_service_multiSignature_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0x81, 0x06, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xea, 0x01, 0x0a, 0x2c, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3a, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x8e, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x2f, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xda, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2f, 0x47, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x6f, 0x6f, 0x62, 0x63, 0x2f, 0x7a, 0x6f, 0x6f, 0x62, 0x63, 0x2d,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_service_multiSignature_proto_goTypes = []interface{}{
	(*model.GetPendingTransactionsRequest)(nil),                        // 0: model.GetPendingTransactionsRequest
	(*model.GetPendingTransactionDetailByTransactionHashRequest)(nil),  // 1: model.GetPendingTransactionDetailByTransactionHashRequest
	(*model.GetMultisignatureInfoRequest)(nil),                         // 2: model.GetMultisignatureInfoRequest
	(*model.GetMultisigAddressByParticipantAddressesRequest)(nil),      // 3: model.GetMultisigAddressByParticipantAddressesRequest
	(*model.GetPendingTransactionsResponse)(nil),                       // 4: model.GetPendingTransactionsResponse
	(*model.GetPendingTransactionDetailByTransactionHashResponse)(nil), // 5: model.GetPendingTransactionDetailByTransactionHashResponse
	(*model.GetMultisignatureInfoResponse)(nil),                        // 6: model.GetMultisignatureInfoResponse
	(*model.GetMultisigAddressByParticipantAddressesResponse)(nil),     // 7: model.GetMultisigAddressByParticipantAddressesResponse
}
var file_service_multiSignature_proto_depIdxs = []int32{
	0, // 0: service.MultisigService.GetPendingTransactions:input_type -> model.GetPendingTransactionsRequest
	1, // 1: service.MultisigService.GetPendingTransactionDetailByTransactionHash:input_type -> model.GetPendingTransactionDetailByTransactionHashRequest
	2, // 2: service.MultisigService.GetMultisignatureInfo:input_type -> model.GetMultisignatureInfoRequest
	3, // 3: service.MultisigService.GetMultisigAddressByParticipantAddresses:input_type -> model.GetMultisigAddressByParticipantAddressesRequest
	4, // 4: service.MultisigService.GetPendingTransactions:output_type -> model.GetPendingTransactionsResponse
	5, // 5: service.MultisigService.GetPendingTransactionDetailByTransactionHash:output_type -> model.GetPendingTransactionDetailByTransactionHashResponse
	6, // 6: service.MultisigService.GetMultisignatureInfo:output_type -> model.GetMultisignatureInfoResponse
	7, // 7: service.MultisigService.GetMultisigAddressByParticipantAddresses:output_type -> model.GetMultisigAddressByParticipantAddressesResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_service_multiSignature_proto_init() }
func file_service_multiSignature_proto_init() {
	if File_service_multiSignature_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_multiSignature_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_multiSignature_proto_goTypes,
		DependencyIndexes: file_service_multiSignature_proto_depIdxs,
	}.Build()
	File_service_multiSignature_proto = out.File
	file_service_multiSignature_proto_rawDesc = nil
	file_service_multiSignature_proto_goTypes = nil
	file_service_multiSignature_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MultisigServiceClient is the client API for MultisigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MultisigServiceClient interface {
	GetPendingTransactions(ctx context.Context, in *model.GetPendingTransactionsRequest, opts ...grpc.CallOption) (*model.GetPendingTransactionsResponse, error)
	GetPendingTransactionDetailByTransactionHash(ctx context.Context, in *model.GetPendingTransactionDetailByTransactionHashRequest, opts ...grpc.CallOption) (*model.GetPendingTransactionDetailByTransactionHashResponse, error)
	GetMultisignatureInfo(ctx context.Context, in *model.GetMultisignatureInfoRequest, opts ...grpc.CallOption) (*model.GetMultisignatureInfoResponse, error)
	GetMultisigAddressByParticipantAddresses(ctx context.Context, in *model.GetMultisigAddressByParticipantAddressesRequest, opts ...grpc.CallOption) (*model.GetMultisigAddressByParticipantAddressesResponse, error)
}

type multisigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultisigServiceClient(cc grpc.ClientConnInterface) MultisigServiceClient {
	return &multisigServiceClient{cc}
}

func (c *multisigServiceClient) GetPendingTransactions(ctx context.Context, in *model.GetPendingTransactionsRequest, opts ...grpc.CallOption) (*model.GetPendingTransactionsResponse, error) {
	out := new(model.GetPendingTransactionsResponse)
	err := c.cc.Invoke(ctx, "/service.MultisigService/GetPendingTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multisigServiceClient) GetPendingTransactionDetailByTransactionHash(ctx context.Context, in *model.GetPendingTransactionDetailByTransactionHashRequest, opts ...grpc.CallOption) (*model.GetPendingTransactionDetailByTransactionHashResponse, error) {
	out := new(model.GetPendingTransactionDetailByTransactionHashResponse)
	err := c.cc.Invoke(ctx, "/service.MultisigService/GetPendingTransactionDetailByTransactionHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multisigServiceClient) GetMultisignatureInfo(ctx context.Context, in *model.GetMultisignatureInfoRequest, opts ...grpc.CallOption) (*model.GetMultisignatureInfoResponse, error) {
	out := new(model.GetMultisignatureInfoResponse)
	err := c.cc.Invoke(ctx, "/service.MultisigService/GetMultisignatureInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multisigServiceClient) GetMultisigAddressByParticipantAddresses(ctx context.Context, in *model.GetMultisigAddressByParticipantAddressesRequest, opts ...grpc.CallOption) (*model.GetMultisigAddressByParticipantAddressesResponse, error) {
	out := new(model.GetMultisigAddressByParticipantAddressesResponse)
	err := c.cc.Invoke(ctx, "/service.MultisigService/GetMultisigAddressByParticipantAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultisigServiceServer is the server API for MultisigService service.
type MultisigServiceServer interface {
	GetPendingTransactions(context.Context, *model.GetPendingTransactionsRequest) (*model.GetPendingTransactionsResponse, error)
	GetPendingTransactionDetailByTransactionHash(context.Context, *model.GetPendingTransactionDetailByTransactionHashRequest) (*model.GetPendingTransactionDetailByTransactionHashResponse, error)
	GetMultisignatureInfo(context.Context, *model.GetMultisignatureInfoRequest) (*model.GetMultisignatureInfoResponse, error)
	GetMultisigAddressByParticipantAddresses(context.Context, *model.GetMultisigAddressByParticipantAddressesRequest) (*model.GetMultisigAddressByParticipantAddressesResponse, error)
}

// UnimplementedMultisigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMultisigServiceServer struct {
}

func (*UnimplementedMultisigServiceServer) GetPendingTransactions(context.Context, *model.GetPendingTransactionsRequest) (*model.GetPendingTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingTransactions not implemented")
}
func (*UnimplementedMultisigServiceServer) GetPendingTransactionDetailByTransactionHash(context.Context, *model.GetPendingTransactionDetailByTransactionHashRequest) (*model.GetPendingTransactionDetailByTransactionHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingTransactionDetailByTransactionHash not implemented")
}
func (*UnimplementedMultisigServiceServer) GetMultisignatureInfo(context.Context, *model.GetMultisignatureInfoRequest) (*model.GetMultisignatureInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultisignatureInfo not implemented")
}
func (*UnimplementedMultisigServiceServer) GetMultisigAddressByParticipantAddresses(context.Context, *model.GetMultisigAddressByParticipantAddressesRequest) (*model.GetMultisigAddressByParticipantAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultisigAddressByParticipantAddresses not implemented")
}

func RegisterMultisigServiceServer(s *grpc.Server, srv MultisigServiceServer) {
	s.RegisterService(&_MultisigService_serviceDesc, srv)
}

func _MultisigService_GetPendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetPendingTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultisigServiceServer).GetPendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MultisigService/GetPendingTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultisigServiceServer).GetPendingTransactions(ctx, req.(*model.GetPendingTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultisigService_GetPendingTransactionDetailByTransactionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetPendingTransactionDetailByTransactionHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultisigServiceServer).GetPendingTransactionDetailByTransactionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MultisigService/GetPendingTransactionDetailByTransactionHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultisigServiceServer).GetPendingTransactionDetailByTransactionHash(ctx, req.(*model.GetPendingTransactionDetailByTransactionHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultisigService_GetMultisignatureInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetMultisignatureInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultisigServiceServer).GetMultisignatureInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MultisigService/GetMultisignatureInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultisigServiceServer).GetMultisignatureInfo(ctx, req.(*model.GetMultisignatureInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultisigService_GetMultisigAddressByParticipantAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetMultisigAddressByParticipantAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultisigServiceServer).GetMultisigAddressByParticipantAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MultisigService/GetMultisigAddressByParticipantAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultisigServiceServer).GetMultisigAddressByParticipantAddresses(ctx, req.(*model.GetMultisigAddressByParticipantAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MultisigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.MultisigService",
	HandlerType: (*MultisigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPendingTransactions",
			Handler:    _MultisigService_GetPendingTransactions_Handler,
		},
		{
			MethodName: "GetPendingTransactionDetailByTransactionHash",
			Handler:    _MultisigService_GetPendingTransactionDetailByTransactionHash_Handler,
		},
		{
			MethodName: "GetMultisignatureInfo",
			Handler:    _MultisigService_GetMultisignatureInfo_Handler,
		},
		{
			MethodName: "GetMultisigAddressByParticipantAddresses",
			Handler:    _MultisigService_GetMultisigAddressByParticipantAddresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/multiSignature.proto",
}
